@using Probe.Models
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    /*styles below accomplished word wrapping of header columns in MyGamesGrid, but it didn't accomplish auto-column width*/
    .k-grid .k-grid-header .k-header .k-link {
        height: auto;
    }

    .k-grid .k-grid-header .k-header {
        white-space: normal;
    }

    /* ensure content wrapper is big enough for grid */
    .content-wrapper {
        max-width: 1200px;
    }

    .k-state-selected {
        background-color: #000000;
        border-color: #111111;
    }

    .gamesGridCommandColumn { /*style grid command column*/
        padding-left: 3px;
        padding-right: 3px;
        width: 167px;
    }

        .gamesGridCommandColumn .k-button { /*style all command buttons*/
            width: 79px;
        }

    .gamesAutoCompleteSearch {
        color: blue;
        font-weight: bold;
    }

    #dialog-generalMessage {
        padding-bottom: 10px;
    }

    .dialog-generalButtons {
        padding-top: 15px;
        float: right;
    }

    #detailsTemplate-container td {
        padding-bottom: 10px;
        font-weight: normal;
    }

    .detailsHeader {
        font-weight: bold;
    }

    .detailsLabel {
        font-weight: bolder;
        color: #00edf0;
    }

    .noDisplay {
        display: none;
    }
</style>

@helper ToolbarTemplate()
{
    <a class="k-button k-button-icontext k-grid-add" href="/Games/Get?MyGamesGrid-mode=insert"><span class="k-icon k-add"></span>Add new game</a>
}
<script type="text/x-kendo-template" id="toolbarTemplate">
    @Html.Raw(@ToolbarTemplate().ToHtmlString().Replace("#", "\\#").Replace("</scr", "<\\/scr"))
</script>

<h2>My Games</h2>
<div style="vertical-align:text-bottom;padding-bottom:5px;margin:0px">

    @(Html.Kendo().AutoComplete()
    .Name("GameAutoComplete") //The name of the autocomplete is mandatory. It specifies the "id" attribute of the widget.
    .IgnoreCase(true)
    .Placeholder("Enter search value for game ...")
    .Filter("contains")
    .DataSource(source =>
        {
            source.Read(read =>
            {
                read.Action("GetGamesForAutoComplete", "Games"); //Set the Action and Controller name
            })
            .ServerFiltering(false); //If true the DataSource will not filter the data on the client.
        })
        .Events(e => e
            .Change("GameAutocompleteChange")
        )
    )
</div>

@(@Html.Kendo().Grid<Probe.Models.View.GameDTO>().Name("MyGamesGrid").Columns(c =>
        {
            c.Bound(g => g.Name).Title("Name").Width(150);
            c.Bound(g => g.GameTypeId).Title("Type").ClientTemplate("#= DisplayGameType(data) #").ClientGroupHeaderTemplate("Type: #= GameTypeText(value) #").Width(70);
            c.Bound(g => g.Description).Title("Descripion").Width(200);
            c.Bound(g => g.Published).Title("Published").ClientTemplate("#= DisplayPublished(data) #").ClientGroupHeaderTemplate("Published: #= PublishedText(value) #");
            c.Bound(g => g.StartDate).Format("{0:M/d/yy h:mm:ss tt}").Title("Start Date");
            c.Bound(g => g.EndDate).Format("{0:M/d/yy h:mm:ss tt}").Title("End Date");
            c.Bound(g => g.PlayerCount).Title("Player Count").ClientTemplate("#= DisplayPlayerCount(data) #");
            c.Command(cmd =>
                            {
                                cmd.Edit();
                                cmd.Custom("Details").Text("Details").Click("openDetails");
                                cmd.Custom("Clone").Text("Clone").Click("CloneNow");
                                cmd.Custom("Config").Text("Config").Click("openConfig");
                                cmd.Custom("Questions").Text("Questions").Click("openQuestions");
                                cmd.Custom("Schedule").Text("Schedule").Click("openSchedules");
                                cmd.Custom("Publish").Text("Publish").Click("PublishNow");
                                cmd.Custom("Players").Text("Players").Click("openPlayers");
                                cmd.Custom("Preview").Text("Preview").Click("openPreview");
                                cmd.Custom("Reports").Text("Reports").Click("openReports");
                                cmd.Custom("Delete").Click("openDeleteConfirm");
                            }).HtmlAttributes(new { @class = "gamesGridCommandColumn" });
        })
        .DataSource(d => d
            .Ajax()
            .Model(model => model.Id(game => game.Id))
            .Sort(sort => sort.Add("Name").Ascending())  //the sorting works, but by adding this code; stops the ability to create games for some reason
            .Read(r => r.Action("Get", "Games"))
            .Update(up => up.Action("Update", "Games"))
            .Create(cr => cr.Action("Create", "Games"))
            .Destroy(ds => ds.Action("Delete", "Games"))
            .Events(events => events
                .Error("MyErrorHandler"))
        )
        .Pageable(page => page.PageSizes(new[] { 5, 10, 20, 50, 100 }))
        .Filterable()
        .Sortable()
        .Groupable()
        .Selectable()
        //edit mode popup - disable the lame canned delete confirmation window. Popup
        .Editable(ed => ed.Mode(GridEditMode.PopUp).TemplateName("Game").Window(w => w.Title("Edit Game")).DisplayDeleteConfirmation(false))
        @*.ToolBar(t => t.Create().Text("Add new game"))*@
.ToolBar(toolbar =>
                        {
                            toolbar.Template(@<text>
                                @ToolbarTemplate()
                            </text>);
                        })
                                    .Events(events =>
                                            {
                                                events.DataBound("OnGridDataBound");
                                                events.Edit("OnGridEdit");
                                            })   //Add event to attach event handlers to completely rendered grid
)

<br />

<div id="dialog-details" title="Details" class="noDisplay"></div>
<div id="dialog-iframe" title="Game Play Preview" class="noDisplay"></div>
<div id="dialog-general" class="noDisplay">
    <div id="dialog-generalMessage"></div>
    <div id="dialog-generalMessage2"></div>
    <div class="dialog-generalButtons">
        <button id="yesGen" class="k-button">OK</button>
        <button id="noGen" class="k-button">Cancel</button>
    </div>
</div>
<div id="dialog-players" title="Game Play Players" class="noDisplay">
    <fieldset>
        <div id="PplayersDiv" style="float: left">
            <label for="Pplayers">Player</label>
            <select name="Pplayers" id="Pplayers"></select>
        </div>
    </fieldset>
    <div class="dialog-generalButtons">
        <button id="playersClose" class="k-button">Close</button>
    </div>
</div>
<div id="dialog-report" title="Game Play Report" class="noDisplay">
    <fieldset>
        <div id="reportTypeDiv" style="float: left">
            <label for="reportType">Report: </label>
            <select name="reportType" id="reportType"></select>
        </div>
        <div id="RplayersDiv" style="float: left; margin-top:10px">
            <label for="Rplayers">Player: </label>
            <select name="Rplayers" id="Rplayers" class="nodisplay" style="margin-left:5px"></select>
        </div>
        <div id="reportMessageDiv"></div>
    </fieldset>
    <div class="dialog-generalButtons">
        <button id="reportYes" class="k-button">OK</button>
        <button id="reportNo" class="k-button">Cancel</button>
    </div>
</div>
<div id="dialog-progress" class="noDisplay" style="text-align:center">
    <div id="progressbar" style="width:80%"></div>
</div>

<!--
    TEMPLATES
-->
<!--  Supports the Message Sum mary on top of the Create/Edit popup  -->
<script type="text/x-kendo-template" id="SummaryValidationMessageTemplate">
    # if (messages.length) { #
    <ul>
        # for (var i = 0; i < messages.length; ++i) { #
        <li style="color:red">#= messages[i] #</li>
        # } #
    </ul>
    # } #
</script>

<!-- Supports the Inline Message -->
<script type="text/kendo-template" id="InLineMessage">
    <div class="k-widget k-tooltip k-tooltip-validation k-invalid-msg field-validation-error" style="margin: 0.5em; display: block;" data-for="#=field#" data-valmsg-for="#=field#" id="#=field#_validationMessage">
        <span class="k-icon k-warning"> </span>#=message#<div class="k-callout k-callout-n"></div>
    </div>
</script>

<script type="text/x-kendo-template" id="detailsTemplate">
    <div id="detailsTemplate-container">
        <h4 class="detailsHeader" style="margin-top:0px">#= Name #</h4>
        <h5 class="detailsHeader">Type: #= GameTypeText(GameTypeId) #</h5>
        <em>#= Description #</em>
        # if(Published) { #
        <h5 class="detailsHeader">Game is Published</h5>
        # } else { #
        <h5 class="detailsHeader">Game is Unpublished</h5>
        # } #
        <table>
            <tr>
                <td class="detailsLabel">
                    Code:
                </td>
                <td>
                    #= Code #
                </td>
            </tr>
            <tr>
                <td class="detailsLabel">
                    Suspend Mode:
                </td>
                <td>
                    #= SuspendedText(SuspendMode) #
                </td>
            </tr>
            <tr>
                <td class="detailsLabel">
                    Player Access To Reports:
                </td>
                <td>
                    #= PublishedText(Published) #
                </td>
            </tr>
            <tr>
                <td class="detailsLabel">
                    StartDate:
                </td>
                <td>
                    #= kendo.toString(StartDate, "M/d/yy h:mm:ss tt") #
                </td>
            </tr>
            <tr>
                <td class="detailsLabel">
                    EndDate:
                </td>
                <td>
                    #= kendo.toString(EndDate, "M/d/yy h:mm:ss tt") #
                </td>
            </tr>
            <tr>
                <td class="detailsLabel">
                    Nbr Players:
                </td>
                <td>
                    #= PlayerCount #
                </td>
            </tr>
            <tr>
                <td class="detailsLabel">
                    Nbr Standing:
                </td>
                <td>
                    #= PlayerActiveCount #
                </td>
            </tr>
            <tr>
                <td class="detailsLabel">
                    Nbr Questions:
                </td>
                <td>
                    #= QuestionCount #
                </td>
            </tr>
        </table>


        <dl>
            <dt> </dt>
        </dl>
    </div>
</script>

<!--
    END TEMPLATES
-->

<script>
    //global variable
    var root = '@Request.Url.Authority' + '@Url.Content("~")';


</script>

<script src="@Url.Content("~/Scripts/probe/games.js")"
        type="text/javascript"></script>

<script src="@Url.Content("~/Scripts/probe/probe-ui-common.js")"
        type="text/javascript"></script>

<!--Reference the SignalR library. -->
<script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
<!--Reference the autogenerated SignalR hub script. -->
<script src="~/signalr/hubs"></script>
